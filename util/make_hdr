#!/usr/bin/python
from sys import argv, exit
from tempfile import mkstemp
import os

import subprocess

if len(argv) < 3:
    print(f"Usage: {argv[0]} <output file> <assembler command...>")
    exit(0)

binfilefd, binfile = mkstemp()
os.close(binfilefd)

result = subprocess.run(argv[2:] + ["-o" , binfile], stdout=subprocess.PIPE)
if result.returncode != 0:
    os.unlink(binfile)
    exit(result.returncode)

segments = result.stdout.decode().strip().split('\n')[5:]
if len(segments) != 2 or segments[0][3:7] != '8000' or segments[1][3:7] != 'fffa':
    print("Bad rom image segments, expected exactly two segments, at 0x8000 and 0xfffa")
    os.unlink(binfile)
    exit(1)

program_sz = int(segments[0].split()[-2])
bf = open(binfile, 'rb')

# read program
program = list(bf.read(program_sz))
line_width = 16
x = program_sz - program_sz % line_width
output = "byte const program[] = {\n"
for i in range(0, x, line_width):
    output += "    "
    for j in range(line_width):
        output += ("0x%02x, " % program[i + j])
    output += "\n"
if x < program_sz:
    output += "    "
    for i in program[x:]:
        output += ("0x%02x, " % i)
    output += "\n"
output += "};\n"

# read vectors
bf.seek(0xfffa - 0x8000)
output += "byte const vectors[] = { " + ", ".join(["0x%02x" % i for i in bf.read(6)]) + " };\n"

open(argv[1], "w").write(output)
os.unlink(binfile)
